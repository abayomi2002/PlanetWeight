trigger:
- main

pool:
  name: default

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:

- task: DotNetCoreCLI@2
  displayName: 'Restore projects'
  inputs:
    command: 'restore'
    projects: '$(solution)'
    feedsToUse: 'select'


- task: SonarCloudPrepare@2
  inputs:
    SonarCloud: 'Sonar'
    organization: 'farmerofb'
    scannerMode: MSBuild
    ProjectKey: 'farmerofb_PlanetWeight'
    ProjectName: 'PlanetWeight'
    extraProperties: |
      sonar.exclusions=**/obj/**,**/*.dll,**/*.csproj,**/*.sln,**/*.cshtml
      sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/coverage.opencover.xml

- task: DotNetCoreCLI@2
  displayName: 'Build Solution'
  inputs:
    command: 'build'
    projects: '$(solution)'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'Run unit/bdd tests with coverage'
  inputs:
    command: 'test'
    projects: '$(solution)'
    arguments: '--configuration $(buildConfiguration) --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover'

- script: |
    mkdir -p $(Build.SourcesDirectory)
    coverage_file=$(find /home/azureuser/myagent/_work/_temp/ -name "*.opencover.xml" | head -n 1)
    if [ -f "$coverage_file" ]; then
        cp "$coverage_file" $(Build.SourcesDirectory)/coverage.opencover.xml
    else
        echo "Coverage file not found"
        exit 1
    fi
  displayName: 'Locate and Copy Coverage File to SonarCloud Directory'


- task: SonarCloudAnalyze@2
  displayName: 'Run sonar analysis'

- task: SonarCloudPublish@2
  displayName: 'Publish sonar result to Sonar Cloud'
  inputs:
    pollingTimeoutSec: '300'

  
- task: DotNetCoreCLI@2
  displayName: 'Publish Build Artifacts 1'
  inputs:
    command: 'publish'
    publishWebProjects: true
    arguments: '--configuration $(buildConfiguration) --output $(build.artifactStagingDirectory)'
    zipAfterPublish: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Build Artifacts 2'
  inputs:
    pathToPublish: '$(build.artifactStagingDirectory)'
    artifactName: 'drop'
    publishLocation: 'Container'
